/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/helper.js":
/*!**************************!*\
  !*** ./client/helper.js ***!
  \**************************/
/***/ ((module) => {

eval("// const socket = io();\n\n// const handleSocket = () =>{\n\n// }\nconst handleError = message => {\n  document.getElementById('errorMessage').textContent = message;\n  document.getElementById('domoMessage').classList.remove('hidden');\n};\nconst uploadFile = async (e, handler) => {\n  e.preventDefault();\n\n  // dishName : dishName,\n  //     nutri: nutri,\n  //     ingre: ingre,\n  //     likes: likes,\n  //     likedBy: likedBy,\n  //     hasLiked: hasLiked,\n  //     csrf: _csrf\n\n  const response = await fetch(e.target.action, {\n    method: 'POST',\n    body: new FormData(e.target)\n  });\n  const result = await response.json();\n  if (handler) {\n    handler(result);\n  }\n  console.log(result);\n  return false;\n};\nconst sendPost = async (url, data, handler) => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n  document.getElementById('domoMessage').classList.add('hidden');\n  if (result.error) {\n    handleError(result.error);\n  }\n  if (result.redirect) {\n    window.location = result.redirect;\n  }\n  if (handler) {\n    handler(result);\n  }\n};\nconst hideError = () => {\n  document.querySelector(\"#domoMessage\").classList.add('hidden');\n};\nmodule.exports = {\n  handleError,\n  sendPost,\n  hideError,\n  uploadFile\n};\n\n//# sourceURL=webpack://Logins/./client/helper.js?");

/***/ }),

/***/ "./client/maker.jsx":
/*!**************************!*\
  !*** ./client/maker.jsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const helper = __webpack_require__(/*! ./helper.js */ \"./client/helper.js\");\nlet csrfToken;\nvar socket = io();\nconst handleUpload = e => {\n  e.preventDefault();\n  helper.hideError();\n  helper.uploadFile(e, loadDomosFromServer);\n  return false;\n};\nconst handlePost = e => {\n  e.preventDefault();\n  helper.hideError();\n  const dishName = e.target.querySelector('#dishName').value;\n  const nutri = e.target.querySelector('#nutriPlus').value;\n  const ingre = e.target.querySelector('#dishIngre').value;\n  const image = e.target.querySelector('#image').value;\n  const likes = e.target.querySelector('#likes').value;\n  const likedBy = e.target.querySelector('#likedBy').value;\n  const hasLiked = e.target.querySelector('#hasLiked').value;\n  const _csrf = e.target.querySelector('#_csrf').value;\n  if (!dishName || !nutri || !ingre || !image) {\n    helper.handleError(\"All fields are required!\");\n    return false;\n  }\n  helper.sendPost(e.target.action, {\n    dishName,\n    nutri,\n    ingre,\n    image,\n    likes,\n    likedBy,\n    hasLiked,\n    _csrf\n  }, loadDomosFromServer);\n  return false;\n};\nconst handleUpdateDomo = e => {\n  e.preventDefault();\n  helper.hideError();\n  const domoID = e.target.querySelector(\"#domoId\").value;\n  const _csrf = e.target.querySelector(\"#_csrf\").value;\n  if (!domoID) {\n    helper.handleError(\"unable to get domo Object\");\n    return false;\n  }\n  helper.sendPost(e.target.action, {\n    domoID,\n    _csrf\n  }, loadDomosFromServer);\n  return false;\n};\nconst handleDeleteDomo = e => {\n  e.preventDefault();\n  helper.hideError();\n  const domoID = e.target.querySelector(\"#domoId\").value;\n  const _csrf = e.target.querySelector(\"#_csrf\").value;\n  if (!domoID) {\n    helper.handleError(\"unable to get domo Object\");\n    return false;\n  }\n  helper.sendPost(e.target.action, {\n    domoID,\n    _csrf\n  }, loadDomosFromServer);\n  return false;\n};\nconst UploadForm = props => {\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"uploadForm\",\n    onSubmit: handleUpload,\n    action: \"/upload\",\n    method: \"POST\",\n    encType: \"multipart/form-data\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"_csrf\",\n    type: \"hidden\",\n    name: \"_csrf\",\n    value: props.csrf\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"sampleFile\",\n    type: \"file\",\n    name: \"sampleFile\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\"\n  }, \"Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Random Name\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Upload!\"\n  }));\n};\nconst DomoForm = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\"\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"domoForm\",\n    name: \"loginForm\",\n    onSubmit: handleUpload,\n    action: \"/upload\",\n    method: \"POST\",\n    className: \"domoForm\",\n    encType: \"multipart/form-data\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\"\n  }, \"Dish Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"dishName\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Dish Name\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"plus\"\n  }, \"Nutritional Pluses: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"nutriPlus\",\n    type: \"text\",\n    name: \"plus\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"ingre\"\n  }, \"Dish Ingredients: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"dishIngre\",\n    type: \"text\",\n    name: \"ingre\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"image\"\n  }, \"Dish Image: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    id: \"image\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"likes\",\n    value: 0,\n    id: \"likes\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"likedBy\",\n    id: \"likedBy\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"hasliked\",\n    id: \"hasliked\",\n    value: false\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"_csrf\",\n    type: \"hidden\",\n    name: \"_csrf\",\n    value: props.csrf\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"makeDomoSubmit\",\n    type: \"submit\",\n    value: \"Make Domo\"\n  })));\n};\nconst DomoList = props => {\n  if (props.domos.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"domoList columns is-multiline\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"emptyDomo\"\n    }, \"No Domos Yet!\"));\n  }\n  console.log(props);\n  const domoNodes = props.domos.map(domo => {\n    const imageSRC = domo.image ? `/retrieve?_id=${domo.image}` : \"/assets/img/recipePlaceholder.png\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: domo._id,\n      className: \"domo card card-equal-height column is-4\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-image\"\n    }, /*#__PURE__*/React.createElement(\"figure\", {\n      className: \"image is-square \"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: imageSRC,\n      alt: \"domo face\",\n      className: \"recipeImage\"\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishName title has-text-centered\"\n    }, \" \", domo.dishName, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishNuritPlus subtitle has-text-centered\"\n    }, \" Nutritional Plus: \", domo.nutri, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishIngredients subtitle has-text-centered\"\n    }, \" Ingerdients: \", domo.ingre, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likes subtitle has-text-centered\"\n    }, \" Food Likes: \", domo.likes, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likedBy subtitle has-text-centered\"\n    }, \" Who Liked The Post: \", domo.likedBy, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-footer columns\"\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"likeForm\",\n      name: \"likeForm\",\n      onSubmit: handleUpdateDomo,\n      action: \"/like\",\n      method: \"POST\",\n      className: \"likeForm column is-4\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"_csrf\",\n      type: \"hidden\",\n      name: \"_csrf\",\n      value: csrfToken\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"domoId\",\n      type: \"hidden\",\n      name: \"domoId\",\n      value: domo._id\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"likeSubmit\",\n      className: \"likeSubmit button is-primary\",\n      type: \"submit\",\n      value: \"Like Post\",\n      disabled: domo.hasLiked\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      id: \"unlikeForm\",\n      name: \"unlikeForm\",\n      onSubmit: handleUpdateDomo,\n      action: \"/unlike\",\n      method: \"POST\",\n      className: \"unlikeForm column is-4\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"_csrf\",\n      type: \"hidden\",\n      name: \"_csrf\",\n      value: csrfToken\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"domoId\",\n      type: \"hidden\",\n      name: \"domoId\",\n      value: domo._id\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"likeSubmit\",\n      className: \"likeSubmit button is-warning\",\n      type: \"submit\",\n      value: \"UnLike Post\",\n      disabled: !domo.hasLiked\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      id: \"deleteForm\",\n      name: \"deleteForm\",\n      onSubmit: handleDeleteDomo,\n      action: \"/delete\",\n      method: \"POST\",\n      className: \"deleteForm column is-4\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"_csrf\",\n      type: \"hidden\",\n      name: \"_csrf\",\n      value: csrfToken\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"domoId\",\n      type: \"hidden\",\n      name: \"domoId\",\n      value: domo._id\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"deleteSubmit button is-danger\",\n      type: \"submit\",\n      value: \"Delete Domo\"\n    }))));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"domoList columns is-multiline\"\n  }, domoNodes);\n};\nconst loadDomosFromServer = async () => {\n  const response = await fetch('/getAllPosts');\n  const data = await response.json();\n  ReactDOM.render( /*#__PURE__*/React.createElement(DomoList, {\n    domos: data.domos\n  }), document.querySelector(\"#domos\"));\n};\nconst init = async () => {\n  console.log(`socket is : ${socket}`);\n  const response = await fetch('/getToken');\n  const data = await response.json();\n  csrfToken = data.csrfToken;\n  ReactDOM.render( /*#__PURE__*/React.createElement(DomoForm, {\n    csrf: data.csrfToken\n  }), document.querySelector(\"#makeDomo\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(UploadForm, {\n    csrf: data.csrfToken\n  }), document.querySelector(\"#imageUpload\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(DomoList, {\n    csrf: data.csrfToken,\n    domos: []\n  }), document.querySelector(\"#domos\"));\n  loadDomosFromServer();\n};\nwindow.onload = init;\n\n//# sourceURL=webpack://Logins/./client/maker.jsx?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/maker.jsx");
/******/ 	
/******/ })()
;