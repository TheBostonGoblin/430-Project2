/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/helper.js":
/*!**************************!*\
  !*** ./client/helper.js ***!
  \**************************/
/***/ ((module) => {

eval("//helper function used to used to tell the user that their is a error or message that needs to be communicated\nconst handleJsonMessage = message => {\n  document.getElementById('jsonMessage').textContent = message;\n};\nconst handleJsonMessageUp = message => {\n  document.getElementById('jsonMessageUpdate').textContent = message;\n};\nconst updateUploadFile = async (e, handler) => {\n  e.preventDefault();\n  const response = await fetch(e.target.action, {\n    method: 'POST',\n    body: new FormData(e.target)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessageUp(result.error);\n  }\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nconst uploadFile = async (e, handler) => {\n  e.preventDefault();\n  const response = await fetch(e.target.action, {\n    method: 'POST',\n    body: new FormData(e.target)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessage(result.error);\n  }\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nconst sendPost = async (url, data, handler) => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessage(result.error);\n  }\n  if (result.redirect) {\n    window.location = result.redirect;\n  }\n  if (handler) {\n    handler(result);\n  }\n};\nconst sendSub = async (url, data, handler) => {\n  console.log(\"Entered send sub\");\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  console.log(\"exit send sub\");\n  const result = await response.json();\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nmodule.exports = {\n  sendPost,\n  uploadFile,\n  sendSub,\n  handleJsonMessage,\n  updateUploadFile,\n  handleJsonMessageUp\n};\n\n//# sourceURL=webpack://Logins/./client/helper.js?");

/***/ }),

/***/ "./client/maker.jsx":
/*!**************************!*\
  !*** ./client/maker.jsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const helper = __webpack_require__(/*! ./helper.js */ \"./client/helper.js\");\nlet csrfToken;\nvar socket = io();\n\n//helper function to handle uploading a post or creating a post\nconst handleUpload = e => {\n  e.preventDefault();\n  helper.uploadFile(e, loadPostsFromServer);\n  return false;\n};\n//helper function for handling post updates in this case just likes\nconst handlePostUpdate = e => {\n  e.preventDefault();\n  const postID = e.target.querySelector(\"#postID\").value;\n  const _csrf = e.target.querySelector(\"#_csrf\").value;\n  if (!postID) {\n    helper.handleJsonMessage(\"unable to get post Object\");\n    return false;\n  }\n  helper.sendPost(e.target.action, {\n    postID,\n    _csrf\n  }, loadPostsFromServer);\n  return false;\n};\n\n//handler function for delete post\nconst handlePostDelete = e => {\n  e.preventDefault();\n  const postID = e.target.querySelector(\"#postID\").value;\n  const _csrf = e.target.querySelector(\"#_csrf\").value;\n  if (!postID) {\n    helper.handleJsonMessage(\"unable to get post Object\");\n    return false;\n  }\n  helper.sendPost(e.target.action, {\n    postID,\n    _csrf\n  }, loadPostsFromServer);\n  return false;\n};\n\n//form used to create post\nconst PostForm = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\"\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"postForm\",\n    name: \"loginForm\",\n    onSubmit: handleUpload,\n    action: \"/upload\",\n    method: \"POST\",\n    className: \"postForm\",\n    encType: \"multipart/form-data\"\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"has-text-centered\"\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title has-text-weight-bold\"\n  }, \"Create Post Here!\")), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"name\"\n  }, \"Dish Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"dishName\",\n    type: \"text\",\n    name: \"dishName\",\n    placeholder: \"Dish Name\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"plus\"\n  }, \"Nutritional Pluses: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"nutriPlus\",\n    type: \"text\",\n    name: \"plus\",\n    placeholder: \"Omega3's,Extra Vitamin C, etc...\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"ingre\"\n  }, \"Dish Ingredients: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"dishIngre\",\n    type: \"text\",\n    name: \"ingre\",\n    placeholder: \"Apples,Lamb,Cumin...\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"image\"\n  }, \"Dish Image: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"file\",\n    name: \"image\",\n    id: \"image\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"likes\",\n    value: 0,\n    id: \"likes\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"likedBy\",\n    id: \"likedBy\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"hasliked\",\n    id: \"hasliked\",\n    value: false\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"_csrf\",\n    type: \"hidden\",\n    name: \"_csrf\",\n    value: props.csrf\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"SubmitPostForm button is-info mt-2\",\n    type: \"submit\",\n    value: \"Make Post\"\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"jsonMessage\",\n    className: \"column is-12 subtitle has-text-centered has-text-danger has-text-weight-bold\"\n  })));\n};\n\n//function used to load all in addition other forms for liking,and deleting post\nconst PostList = props => {\n  if (props.posts.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postList columns is-multiline\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"emptyDomo\"\n    }, \"No one has posted anything\"));\n  }\n  console.log(props);\n  const postNodes = props.posts.map(post => {\n    const imageSRC = post.image ? `/retrieve?_id=${post.image}` : \"/assets/img/recipePlaceholder.png\";\n    let likedByString = '';\n    for (let x = 0; x < post.likedBy.length; x++) {\n      if (x + 1 === post.likedBy.length) {\n        likedByString += post.likedBy[x];\n      } else {\n        likedByString += `${post.likedBy[x]},`;\n      }\n    }\n    if (likedByString === undefined || likedByString === null || likedByString === '') {\n      likedByString = \"No likes yet!\";\n    }\n    let deleteForm;\n    if (props.account.username === post.whoCreated) {\n      deleteForm = /*#__PURE__*/React.createElement(\"form\", {\n        id: \"deleteForm\",\n        name: \"deleteForm\",\n        onSubmit: handlePostDelete,\n        action: \"/delete\",\n        method: \"POST\",\n        className: \"deleteForm column is-6\"\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        id: \"_csrf\",\n        type: \"hidden\",\n        name: \"_csrf\",\n        value: csrfToken\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"postID\",\n        type: \"hidden\",\n        name: \"postID\",\n        value: post._id\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"deleteSubmit button is-danger\",\n        type: \"submit\",\n        value: \"Delete Post\"\n      }));\n    } else {}\n    let likeButton;\n    //first checks if the user has liked the post or not than it determines if the user owns the post and wether or not a delete form is also nessary\n    if (post.hasLiked) {\n      //if the delete form exist than adjust the buttons width accordingly before creating the form\n      if (deleteForm) {\n        likeButton = /*#__PURE__*/React.createElement(\"form\", {\n          id: \"unlikeForm\",\n          name: \"unlikeForm\",\n          onSubmit: handlePostUpdate,\n          action: \"/unlike\",\n          method: \"POST\",\n          className: \"unlikeForm column is-6\"\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: \"_csrf\",\n          type: \"hidden\",\n          name: \"_csrf\",\n          value: csrfToken\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"postID\",\n          type: \"hidden\",\n          name: \"postID\",\n          value: post._id\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"likeSubmit\",\n          className: \"likeSubmit button is-warning\",\n          type: \"submit\",\n          value: \"UnLike Post\"\n        }));\n      } else {\n        likeButton = /*#__PURE__*/React.createElement(\"form\", {\n          id: \"unlikeForm\",\n          name: \"unlikeForm\",\n          onSubmit: handlePostUpdate,\n          action: \"/unlike\",\n          method: \"POST\",\n          className: \"unlikeForm column is-12\"\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: \"_csrf\",\n          type: \"hidden\",\n          name: \"_csrf\",\n          value: csrfToken\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"postID\",\n          type: \"hidden\",\n          name: \"postID\",\n          value: post._id\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"likeSubmit\",\n          className: \"likeSubmit button is-warning\",\n          type: \"submit\",\n          value: \"UnLike Post\"\n        }));\n      }\n    } else {\n      if (deleteForm) {\n        likeButton = /*#__PURE__*/React.createElement(\"form\", {\n          id: \"likeForm\",\n          name: \"likeForm\",\n          onSubmit: handlePostUpdate,\n          action: \"/like\",\n          method: \"POST\",\n          className: \"likeForm column is-6\"\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: \"_csrf\",\n          type: \"hidden\",\n          name: \"_csrf\",\n          value: csrfToken\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"postID\",\n          type: \"hidden\",\n          name: \"postID\",\n          value: post._id\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"likeSubmit\",\n          className: \"likeSubmit button is-primary\",\n          type: \"submit\",\n          value: \"Like Post\"\n        }));\n      } else {\n        likeButton = /*#__PURE__*/React.createElement(\"form\", {\n          id: \"likeForm\",\n          name: \"likeForm\",\n          onSubmit: handlePostUpdate,\n          action: \"/like\",\n          method: \"POST\",\n          className: \"likeForm column is-12\"\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          id: \"_csrf\",\n          type: \"hidden\",\n          name: \"_csrf\",\n          value: csrfToken\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"postID\",\n          type: \"hidden\",\n          name: \"postID\",\n          value: post._id\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          id: \"likeSubmit\",\n          className: \"likeSubmit button is-primary\",\n          type: \"submit\",\n          value: \"Like Post\"\n        }));\n      }\n    }\n\n    //returns the approprate post depending on the user\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: post._id,\n      className: \"post container column is-4 is-info p-0\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card card-equal-height is-info m-2 p-2\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-image\"\n    }, /*#__PURE__*/React.createElement(\"figure\", {\n      className: \"image is-square\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: imageSRC,\n      alt: \"placeholder pic\",\n      className: \"recipeImage\"\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"createdBy title has-text-centered\"\n    }, \" By:\", post.whoCreated, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishName title has-text-centered\"\n    }, \" \", post.dishName, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishNuritPlus subtitle has-text-centered\"\n    }, \" Nutritional Plus: \", post.nutri, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishIngredients subtitle has-text-centered\"\n    }, \" Ingerdients: \", post.ingre, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likes subtitle has-text-centered\"\n    }, \" Food Likes: \", post.likes, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likedBy subtitle has-text-centered\"\n    }, \" Who Liked The Post: \", `${likedByString}`, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns\"\n    }, likeButton, deleteForm)));\n  });\n\n  //loads the posts\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postList columns is-multiline\"\n  }, postNodes);\n};\n\n//renders the post from the server\nconst loadPostsFromServer = async () => {\n  const response = await fetch('/getAllPosts');\n  const data = await response.json();\n  const response2 = await fetch('/getAccount');\n  const data2 = await response2.json();\n  ReactDOM.render( /*#__PURE__*/React.createElement(PostList, {\n    csrf: data.csrfToken,\n    posts: data.posts,\n    account: data2.account\n  }), document.querySelector(\"#posts\"));\n};\n\n//intial function. loading into the react code\nconst init = async () => {\n  //fetching data form the server for rendering forms and react components\n  const response = await fetch('/getToken');\n  const data = await response.json();\n  const response2 = await fetch('/getAccount');\n  const data2 = await response2.json();\n  csrfToken = data.csrfToken;\n  ReactDOM.render( /*#__PURE__*/React.createElement(PostForm, {\n    csrf: data.csrfToken\n  }), document.querySelector(\"#createPosts\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(PostList, {\n    csrf: data.csrfToken,\n    posts: [],\n    account: data2.account\n  }), document.querySelector(\"#posts\"));\n  loadPostsFromServer();\n};\nwindow.onload = init;\n\n//# sourceURL=webpack://Logins/./client/maker.jsx?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/maker.jsx");
/******/ 	
/******/ })()
;