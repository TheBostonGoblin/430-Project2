/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/helper.js":
/*!**************************!*\
  !*** ./client/helper.js ***!
  \**************************/
/***/ ((module) => {

eval("//helper function used to used to tell the user that their is a error or message that needs to be communicated\nconst handleJsonMessage = message => {\n  document.getElementById('jsonMessage').textContent = message;\n};\nconst handleJsonMessageUp = message => {\n  document.getElementById('jsonMessageUpdate').textContent = message;\n};\nconst updateUploadFile = async (e, handler) => {\n  e.preventDefault();\n  const response = await fetch(e.target.action, {\n    method: 'POST',\n    body: new FormData(e.target)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessageUp(result.error);\n  }\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nconst uploadFile = async (e, handler) => {\n  e.preventDefault();\n  const response = await fetch(e.target.action, {\n    method: 'POST',\n    body: new FormData(e.target)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessage(result.error);\n  }\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nconst sendPost = async (url, data, handler) => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n  if (result.error) {\n    handleJsonMessage(result.error);\n  }\n  if (result.redirect) {\n    window.location = result.redirect;\n  }\n  if (handler) {\n    handler(result);\n  }\n};\nconst sendSub = async (url, data, handler) => {\n  console.log(\"Entered send sub\");\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  console.log(\"exit send sub\");\n  const result = await response.json();\n  if (handler) {\n    handler(result);\n  }\n  return false;\n};\nmodule.exports = {\n  sendPost,\n  uploadFile,\n  sendSub,\n  handleJsonMessage,\n  updateUploadFile,\n  handleJsonMessageUp\n};\n\n//# sourceURL=webpack://Logins/./client/helper.js?");

/***/ }),

/***/ "./client/profile.jsx":
/*!****************************!*\
  !*** ./client/profile.jsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Creating nessary global variables such as my helper function the csrf token and socket io instance\nconst helper = __webpack_require__(/*! ./helper.js */ \"./client/helper.js\");\nlet csrfToken;\nvar socket = io();\n\n//Below all functions starting with \"handler\" are onsubmit handler functions that utalize our helper functions to send data to the server\nconst handlePassChange = e => {\n  e.preventDefault();\n  const pass = e.target.querySelector(\"#pass\").value;\n  const pass2 = e.target.querySelector(\"#pass2\").value;\n  const _csrf = e.target.querySelector(\"#_csrf\").value;\n  helper.sendPost(e.target.action, {\n    pass,\n    pass2,\n    _csrf\n  });\n  return false;\n};\nconst handleUpdatePost = e => {\n  e.preventDefault();\n  helper.updateUploadFile(e, loadPostFromMongoDB);\n};\nconst handleMembership = e => {\n  e.preventDefault();\n  let _csrf = e.target.querySelector(\"#_csrf\").value;\n  helper.sendPost(e.target.action, {\n    _csrf\n  }, loadPostFromMongoDB);\n};\n\n//react element welcoming the user back\nconst UserInfo = props => {\n  console.log(props.account);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\"\n  }, \"Hello, \", props.account.username, \"! Welcome Back to Gobble!\");\n};\n\n//This form will handle if the user changes their password\nconst ChangePassForm = props => {\n  return /*#__PURE__*/React.createElement(\"form\", {\n    action: \"/updatePass\",\n    method: \"POST\",\n    name: \"signupForm\",\n    onSubmit: handlePassChange,\n    className: \"changePass\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"has-text-centered\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title has-font-weight-bold\",\n    htmlFor: \"membershipStat\"\n  }, \"Change Password\")), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"pass\"\n  }, \"Password: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"pass\",\n    type: \"text\",\n    name: \"pass\",\n    placeholder: \"new password\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"pass2\"\n  }, \"Password Retype: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"pass2\",\n    type: \"text\",\n    name: \"pass2\",\n    placeholder: \"re-enter new password\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"_csrf\",\n    type: \"hidden\",\n    name: \"_csrf\",\n    value: props.csrf\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"formSubmit button is-danger mt-2\",\n    type: \"submit\",\n    value: \"Change Password\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"jsonMessage\",\n    className: \"subtitle has-text-weight-bold\"\n  }));\n};\n\n//Although similar to makers PostList in this case post are generated with forms that update your post\nconst PostList = props => {\n  //handling if you've created no post\n  if (props.posts.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"postList columns is-multiline\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"No Post\"\n    }, \"No Post Submited!\"));\n  }\n  const postNodes = props.posts.map(post => {\n    //retieves the image of the post from the server from file models\n    let imageSRC = post.image ? `/retrieve?_id=${post.image}` : \"/assets/img/recipePlaceholder.png\";\n\n    // Will ensure that each user that has liked a post will be seperated by a comma\n    let likedByString = '';\n    for (let x = 0; x < post.likedBy.length; x++) {\n      if (x + 1 === post.likedBy.length) {\n        likedByString += post.likedBy[x];\n      } else {\n        likedByString += `${post.likedBy[x]},`;\n      }\n    }\n    if (likedByString === undefined || likedByString === null || likedByString === '') {\n      likedByString = \"No likes yet!\";\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: post._id,\n      className: \"post card card-equal-height column is-4\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-image\"\n    }, /*#__PURE__*/React.createElement(\"figure\", {\n      className: \"image is-square\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: imageSRC,\n      alt: \"placeholder image\",\n      className: \"recipeImage\"\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\"\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishName title has-text-centered\"\n    }, \" \", post.dishName, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishNuritPlus subtitle has-text-centered\"\n    }, \" Nutritional Plus: \", post.nutri, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"dishIngredients subtitle has-text-centered\"\n    }, \" Ingerdients: \", post.ingre, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likes subtitle has-text-centered\"\n    }, \" Food Likes: \", post.likes, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"likedBy subtitle has-text-centered\"\n    }, \" Who Liked The Post: \", `${likedByString}`, \" \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"postID\",\n      type: \"hidden\",\n      name: \"postID\",\n      value: post._id\n    })), /*#__PURE__*/React.createElement(PostUpdate, {\n      post: post,\n      csrf: props.csrf\n    }));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postList columns is-multiline\"\n  }, postNodes);\n};\n//This is a form created with post the user has made. allowing them to change post\nconst PostUpdate = props => {\n  console.log(\"posting is here below\");\n  console.log(props);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container box\"\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"postForm\",\n    name: \"loginForm\",\n    onSubmit: handleUpdatePost,\n    key: props.post._id,\n    action: \"/editPost\",\n    method: \"POST\",\n    className: \"postForm has-text-centered is-centered\",\n    encType: \"multipart/form-data\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"name\"\n  }, \"Dish Name \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"dishName\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"New Dish Name\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"plus\"\n  }, \"Nutritional Pluses \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"nutriPlus\",\n    type: \"text\",\n    name: \"plus\",\n    placeholder: \"New Nutritional Pluses\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"ingre\"\n  }, \"Dish Ingredients: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    id: \"dishIngre\",\n    type: \"text\",\n    name: \"ingre\",\n    placeholder: \"New Ingredients Pluses\"\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"image\"\n  }, \"Dish Image: \"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"file\",\n    name: \"image\",\n    id: \"image\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"_csrf\",\n    type: \"hidden\",\n    name: \"_csrf\",\n    value: props.csrf\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"postID\",\n    type: \"hidden\",\n    name: \"postID\",\n    value: props.post._id\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"jsonMessageUpdate\",\n    className: \"subtitle has-text-weight-bold\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"button is-danger column is-12 mt-2 makeDomoSubmit\",\n    type: \"submit\",\n    value: \"Update Post\"\n  })));\n};\n\n//Used to create a form allowing the user to gain premium membership or not \nconst ToggleMemebership = props => {\n  let membershipButton;\n  console.log(\"account below\");\n  console.log(props.account);\n  if (props.account.membership === true) {\n    membershipButton = /*#__PURE__*/React.createElement(\"form\", {\n      action: \"/deMember\",\n      method: \"POST\",\n      name: \"actMemberForm\",\n      onSubmit: handleMembership,\n      key: \"active\",\n      className: \"actMemberForm columns is-multiline is-centered\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column is-12 has-text-centered\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title has-font-weight-bold\",\n      htmlFor: \"membershipStat\"\n    }, \"You are currently a Memeber! Hope you stick around but you can always cancel your membership below\")), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"_csrf\",\n      type: \"hidden\",\n      name: \"_csrf\",\n      value: props.csrf\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"member\",\n      name: \"member\",\n      className: \"input button is-danger memberSubmit mt-2 column is-12\",\n      type: \"submit\",\n      value: \"Cancel Premium Membership\"\n    }));\n  } else {\n    membershipButton = /*#__PURE__*/React.createElement(\"form\", {\n      action: \"/aMember\",\n      method: \"POST\",\n      onSubmit: handleMembership,\n      name: \"deActMemberForm\",\n      key: \"deactive\",\n      className: \"deActMemberForm columns is-multiline is-centered\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column is-12 has-text-centered\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title has-font-weight-bold\",\n      htmlFor: \"membershipStat\"\n    }, \"You are currently not a member, Subscribe For a Premium Memebership today!\")), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"_csrf\",\n      type: \"hidden\",\n      name: \"_csrf\",\n      value: props.csrf\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"member\",\n      name: \"member\",\n      className: \"input button is-primary memberSubmit mt-2 column is-12\",\n      type: \"submit\",\n      value: \"Gain Premium Membership\"\n    }));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"memFormContainer\"\n  }, membershipButton);\n};\n\n//function often used by helpers to ensure the server updates after a form has been completed\nconst loadPostFromMongoDB = async () => {\n  const response = await fetch('/getMyPost');\n  const data = await response.json();\n  const response2 = await fetch('/getAccount');\n  const data2 = await response2.json();\n  const responseCSRF = await fetch('/getToken');\n  const dataCSRF = await responseCSRF.json();\n  const csrfToken = dataCSRF.csrfToken;\n  ReactDOM.render( /*#__PURE__*/React.createElement(PostList, {\n    posts: data.posts,\n    csrf: csrfToken\n  }), document.querySelector(\"#posts\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(UserInfo, {\n    account: data2.account\n  }), document.querySelector(\".welcome\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(ChangePassForm, {\n    csrf: csrfToken,\n    account: data2.account\n  }), document.querySelector(\"#changePass\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(ToggleMemebership, {\n    csrf: csrfToken,\n    account: data2.account\n  }), document.querySelector(\"#membership\"));\n};\n\n//loads to inital react elements before its submited\nconst init = async () => {\n  console.log(`socket is : ${socket}`);\n  const response = await fetch('/getToken');\n  const data = await response.json();\n  csrfToken = data.csrfToken;\n  ReactDOM.render( /*#__PURE__*/React.createElement(UserInfo, {\n    csrf: data.csrfToken,\n    account: []\n  }), document.querySelector(\".welcome\"));\n  //testingUser\n  ReactDOM.render( /*#__PURE__*/React.createElement(PostList, {\n    csrf: data.csrfToken,\n    posts: []\n  }), document.querySelector(\"#posts\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(ChangePassForm, {\n    csrf: csrfToken,\n    account: []\n  }), document.querySelector(\"#changePass\"));\n  ReactDOM.render( /*#__PURE__*/React.createElement(ToggleMemebership, {\n    csrf: csrfToken,\n    account: []\n  }), document.querySelector(\"#membership\"));\n  loadPostFromMongoDB();\n};\nwindow.onload = init;\n\n//# sourceURL=webpack://Logins/./client/profile.jsx?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/profile.jsx");
/******/ 	
/******/ })()
;